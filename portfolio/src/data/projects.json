 [ 
    {
      "id": 4,
      "title": "SellOut: E-Commerce App",
      "description": "This is an e-commerce application developed using the MERN stack, catering to both buyers and tech enthusiasts. It allows users to browse through a variety of products, add them to their cart. Users can also leave reviews and ratings for products.",
      "imageUrl": "https://github.com/Quantumcode9/Sellout-Client/raw/main/readme/tvs.png",
      "videoUrl": "assets/Selloutvid.mov",
      "technologies": ["React", "MongoDB", "Node.js", "Express"],
      "link": "https://sellout-final.netlify.app/",
      "github": "https://github.com/Quantumcode9/Sellout-Client",
      "model": "/models/Laptop-Iphone.glb",
      "challenges": "I faced difficulties connecting reviews to the correct product page. The main challenge was passing the product ID to the review form and ensuring the review was associated with the correct product.",
      "solution": "I used the useParams hook to retrieve the product ID from the URL and passed it to the review form. This allowed me to properly save the review to the correct product using the corresponding ID."
    }, 
    {
      "id": 5,
      "title": "Gnosis: Tv Show Tracker App",
      "description": "This application serves as a personal tracker and reviewer for your favorite TV shows, integrating the TMDB API to provide comprehensive information on series. The app allows for easy tracking and reviewing, keeping all your television interests in one convenient place.",
      "imageUrl": "https://github.com/Quantumcode9/Project2-Gnosisapp/raw/main/Photos/Screenshot-Show.png",
      "videoUrl": "assets/gnosis.mp4",
      "technologies": ["MongoDB", "Node.js", "Express"],
      "link": "https://gnosis-app.fly.dev",
      "github": "https://github.com/Quantumcode9/Project2-Gnosisapp",
      "model": "/models/Gnosis-model.glb",
      "challenges": "This was my first experience working with an API, and I struggled to extract the necessary data for my app due to unclear documentation and unfamiliarity with the API‚Äôs structure.",
      "solution": "I switched to the TMDB API, which provided better documentation and a more intuitive structure. By utilizing its extensive resources and seeking help from online guides."

    },
    {
      "id": 6,
      "title": "What's Happening: Event Planner",
      "description": "This app provides a user-friendly platform for organizing various events. Leveraging the power of Django and Python for the backend, Postgres for the database, and AWS S3 for storage, it offers a robust and scalable solution to handle all aspects of event management efficiently.",
      "imageUrl": "https://github.com/Quantumcode9/whats-happening/raw/main/readme/photos/hub.png",
      "technologies": ["Django", "Python", "Postgres","AWS S3"],
      "videoUrl": "assets/Whats-Happening.mp4",
      "link": "https://whats-happening.onrender.com",
      "model": "/models/Whats-Happening.glb",
      "github": "https://github.com/Quantumcode9/whats-happening?tab=readme-ov-file",
      "challenges": "Being my first team project, I faced a steep learning curve with collaborative tools, version control, and communication, which made task coordination and conflict management difficult.",
      "solution": "I addressed these challenges by emphasizing clear communication, regular updates, and effective teamwork. Using tools like GitHub, Slack, and Zoom, we successfully coordinated our efforts and delivered a high-quality product."
    },
    {
      "id": 3,
      "title": "Inquizitor: Quiz App",
      "description": "Inquizitor is a web application that offers interactive personality quizzes, including Myers-Briggs, Zodiac, and Enneagram. It uses Next.js for server-side rendering, Tailwind CSS for styling, and the OpenAI API to generate personalized questions and analyze results. The app is fully responsive, supports dark mode, and allows users to provide feedback on their quiz results to improve accuracy.",
      "imageUrl": "https://github.com/Quantumcode9/Inquizitor/static/Quiz2.png",
      "technologies": ["Next.js", "Tailwind CSS", "OpenAI API"],
      "link": "https://inquizitor-six.vercel.app",
      "model": "/models/Inquiz2.glb",
      "github": "https://github.com/Quantumcode9/Inquizitor",
      "challenges": "As the quiz logic grew more complex, I experienced significant delays in loading times, especially when interacting with the OpenAI API for generating and analyzing responses. This negatively impacted user experience.",
      "solution": "I addressed this by implementing preloading for quiz questions and optimizing API calls to reduce loading times. By streamlining the quiz logic and enhancing the user interface, I improved the app‚Äôs overall performance and responsiveness."

    },

    { 
      "id": 1,
      "title": "Diagnoself: AI Symptom Checker",
      "description": "Diagnoself is an AI-powered symptom checker that helps users identify potential health conditions. Users select symptoms by body part or manually, and the app provides possible conditions based on symptoms, age, and gender, using the OpenAI API for recommendations.",
      "imageUrl": "https://github.com/Quantumcode9/diagnoself/static/main.png",
      "technologies": ["React", "Next.js", "Tailwind CSS", "OpenAI API"],
      "link": "https://diagnoself.vercel.app",
      "model": "/models/Diagnoself.glb",
      "github": "https://github.com/Quantumcode9/diagnoself",
      "challenges": "One of the main challenges getting the svg body parts to work with the symptom checker. I had to figure out how to get the body parts to change color when a user clicks on them and then display the symptoms for that body part.",
      "solution": "I was able to solve this by using the useState hook to keep track of the selected body part and then display the symptoms for that body part. I then used the onClick event to change the color of the body part when a user clicks on it."

  },

    {
      "id": 2,
      "title": "Cloudy with A Chance of Chaos Probability",
      "description": "An interactive, real-time system for monitoring and visualizing environmental changes, including air quality, temperature, and humidity. Designed to provide insights into ecological shifts with user-friendly visualizations and timely alerts. 1st place Hackaton winner! üèÜ",
      "imageUrl": "https://github.com/Quantumcode9/waterwars/static/main.png",
      "technologies": ["React", "Next.js", "Tailwind CSS", "PostgreSQL", "Prisma", "WeatherAPI"],
      "link": "https://water-wars-psi.vercel.app",
      "model": "/models/WeatherApp.glb",
      "github": "https://github.com/Quantumcode9/water-wars",
      "challenges": "Building the project in TypeScript with limited experience was difficult, especially when working with a dispersed team. We encountered issues with type errors, data integration, and API calls, which slowed down development.",
      "solution": "We overcame these challenges by leveraging TypeScript‚Äôs strong typing and error-checking capabilities, which helped us catch bugs early and streamline the development process. By collaborating closely and sharing knowledge, we successfully integrated the WeatherAPI and delivered a winning project."
    }


   

  ]
