 [ 
    {
      "id": 4,
      "title": "SellOut: E-Commerce App",
      "description": "This e-commerce application, built with the MERN stack, allows users to browse products, add them to their cart, and leave reviews.",
      "imageUrl": "https://github.com/Quantumcode9/Sellout-Client/raw/main/readme/tvs.png",
      "videoUrl": "assets/Sellout.mp4",
      "technologies": ["React", "MongoDB", "Node.js", "Express"],
      "link": "https://sellout-final.netlify.app/",
      "github": "https://github.com/Quantumcode9/Sellout-Client",
      "model": "/models/Laptop-Iphone.glb",
      "challenges": "I struggled to connect reviews to the correct product page, mainly in passing the product ID to the review form.",
      "solution": "I used the useParams hook to get the product ID from the URL and ensured reviews were saved to the right product."
    }, 
    {
      "id": 5,
      "title": "Gnosis: Tv Show Tracker App",
      "description": "This app tracks and reviews your favorite TV shows using the TMDB API for detailed information. It centralizes all your TV interests.",
      "imageUrl": "https://github.com/Quantumcode9/Project2-Gnosisapp/raw/main/Photos/Screenshot-Show.png",
      "technologies": ["MongoDB", "Node.js", "Express"],
      "link": "https://gnosis-app.fly.dev",
      "github": "https://github.com/Quantumcode9/Project2-Gnosisapp",
      "model": "/models/Gnosis-model.glb",
      "challenges": "This was my first experience working with an API, and I struggled due to unclear documentation and unfamiliarity with the API‚Äôs structure.",
      "solution": "I switched to the TMDB API for clearer documentation and better structure, using online guides for support."

    },
    {
      "id": 6,
      "title": "What's Happening: Event Planner",
      "description": "This app offers an intuitive platform for event organization, using Django and Python for the backend, Postgres for the database, and AWS S3 for storage, ensuring efficient event management.",
      "imageUrl": "https://github.com/Quantumcode9/whats-happening/raw/main/readme/photos/hub.png",
      "technologies": ["Django", "Python", "Postgres","AWS S3"],
      "link": "https://whats-happening.onrender.com",
      "model": "/models/Whats-Happening.glb",
      "github": "https://github.com/Quantumcode9/whats-happening?tab=readme-ov-file",
      "challenges": "Being my first team project, I faced a steep learning curve with collaborative tools, version control, and communication, which made task coordination and conflict management difficult.",
      "solution": "I addressed these challenges by focusing on clear communication and regular updates, utilizing GitHub, Slack, and Zoom for effective teamwork and successful project delivery."
    },
    {
      "id": 3,
      "title": "Inquizitor: Quiz App",
      "description": "Inquizitor is a responsive web app for interactive personality quizzes, including Myers-Briggs, Zodiac, and Enneagram, built with Next.js, Tailwind CSS, and OpenAI API for personalized questions and result analysis. It supports dark mode and user feedback for accuracy improvement.",
      "imageUrl": "https://github.com/Quantumcode9/Inquizitor/static/Quiz2.png",
      "technologies": ["Next.js", "Tailwind CSS", "OpenAI API"],
      "link": "https://inquizitor-six.vercel.app",
      "model": "/models/Inquiz2.glb",
      "github": "https://github.com/Quantumcode9/Inquizitor",
      "challenges": "Complex quiz logic caused loading delays, especially with OpenAI API interactions, impacting user experience.",
      "solution": "I optimized API calls and implemented question preloading to reduce load times, enhancing performance and responsiveness for a smoother user experience."

    },

    { 
      "id": 1,
      "title": "Diagnoself: AI Symptom Checker",
      "description": "Diagnoself is an AI-powered symptom checker that helps users identify potential health conditions. Users can select symptoms by body part or manually, with recommendations tailored by age and gender using the OpenAI API.",
      "imageUrl": "https://github.com/Quantumcode9/diagnoself/static/main.png",
      "technologies": ["React", "Next.js", "Tailwind CSS", "OpenAI API"],
      "link": "https://diagnoself.vercel.app",
      "model": "/models/Diagnoself.glb",
      "github": "https://github.com/Quantumcode9/ai-symptom-checker",
      "challenges": "Implementing clickable, color-changing SVG body parts to display symptoms was a significant challenge.",
      "solution": "Using the useState hook, I tracked the selected body part and displayed relevant symptoms. The onClick event changed the color of each body part when selected, creating an intuitive, interactive experience"

  },

    {
      "id": 2,
      "title": "Cloudy with A Chance of Chaos Probability",
      "description": "An interactive system for real-time environmental monitoring, visualizing air quality, temperature, and humidity, with user-friendly displays and timely alerts. üèÜ 1st place Hackathon winner!",
      "imageUrl": "https://github.com/Quantumcode9/waterwars/static/main.png",
      "technologies": ["React", "Next.js", "Tailwind CSS", "PostgreSQL", "Prisma", "WeatherAPI"],
      "link": "https://water-wars-nu.vercel.app",
      "model": "/models/WeatherApp.glb",
      "github": "https://github.com/Quantumcode9/water-wars",
      "challenges": "Limited TypeScript experience made it challenging to manage type errors, data integration, and API calls in a dispersed team setting.",
      "solution": "We maximized TypeScript‚Äôs typing and error-checking to catch bugs early. Through close collaboration and knowledge sharing, we integrated WeatherAPI successfully, leading to a winning project."
    }



  ]
